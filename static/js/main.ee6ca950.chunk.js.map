{"version":3,"sources":["Templates.js","Meme.js","App.js","reportWebVitals.js","index.js"],"names":["Templates","templates","setMeme","className","map","template","onClick","style","backgroundImage","url","id","Meme","meme","useState","template_id","username","password","boxes","form","setForm","src","alt","Array","box_count","_","index","type","placeholder","onChange","e","newBoxes","text","target","value","box","fetch","then","res","json","data","App","setTemplates","fetchTemplate","a","response","memes","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAaeA,EAbG,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,QAC3B,OACI,qBAAKC,UAAU,YAAf,SACKF,EAAUG,KAAI,SAACC,GAAD,OACX,qBAAKF,UAAU,WAA6BG,QAAS,WAAOJ,EAAQG,IAApE,SACI,qBAAKF,UAAU,MAAMI,MAAO,CAACC,gBAAgB,OAAD,OAASH,EAASI,IAAlB,SADjBJ,EAASK,U,eC6CzCC,EA/CF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMV,EAAa,EAAbA,QACjB,EAAwBW,mBAAS,CAC7BC,YAAaF,EAAKF,GAClBK,SAAU,gBACVC,SAAU,aACVC,MAAO,KAJX,mBAAOC,EAAP,KAAaC,EAAb,KAmBA,OACI,sBAAKhB,UAAU,OAAf,UACI,qBAAKiB,IAAKR,EAAKH,IAAKY,IAAI,KACxB,8BAEQ,YAAIC,MAAMV,EAAKW,YAAYnB,KAAI,SAACoB,EAAGC,GAAJ,OAC3B,uBAEIC,KAAK,OACLC,YAAW,uBAAkBF,EAAlB,KACXG,SAAU,SAACC,GACP,IAAMC,EAAWZ,EAAKD,MACtBa,EAASL,GAAS,CAACM,KAAKF,EAAEG,OAAOC,OACjCd,EAAQ,2BAAID,GAAL,IAAWD,MAAOa,OANxBL,QAYrB,gCACI,wBAAQnB,QAhCC,WACjB,IAAIG,EAAG,4DAAwDS,EAAKJ,YAA7D,qBAAqFI,EAAKH,SAA1F,qBAA+GG,EAAKF,UAE3HE,EAAKD,MAAMb,KAAI,SAAC8B,EAAKT,GACjBhB,GAAG,iBAAcgB,EAAd,mBAA8BS,EAAIH,SAEzCI,MAAM1B,GAAK2B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAC1BF,MAAK,SAAAG,GACFrC,EAAQ,2BAAIU,GAAL,IAAWH,IAAK8B,EAAKA,KAAK9B,WAwB7B,2BACA,wBAAQH,QAAS,kBAAKJ,EAAQ,OAA9B,oCCVDsC,MA1Bf,WACE,MAA+B3B,mBAAS,IAAxC,mBAAOZ,EAAP,KAAiBwC,EAAjB,KACA,EAAqB5B,mBAAS,MAA9B,mBAAOD,EAAP,KAAYV,EAAZ,KAEMwC,EAAa,uCAAC,8BAAAC,EAAA,sEACGR,MAAM,qCADT,cACZS,EADY,gBAEAA,EAASN,OAFT,OAEZO,EAFY,OAGlBJ,EAAaI,EAAMN,KAAKM,OAHN,2CAAD,qDAWnB,OALAC,qBAAU,WACRJ,MACA,IAIA,sBAAKvC,UAAU,MAAf,UACE,gDACA,wEACQ,OAAPS,EAAa,cAAC,EAAD,CAAWX,UAAWA,EACpCC,QAASA,IACP,cAAC,EAAD,CAAMU,KAAMA,EAAMV,QAASA,QChBpB6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ee6ca950.chunk.js","sourcesContent":["const Templates = ({templates, setMeme}) => {\r\n    return(\r\n        <div className=\"templates\">\r\n            {templates.map((template)=> (\r\n                <div className=\"template\" key={template.id} onClick={() => {setMeme(template)}}>\r\n                    <div className=\"img\" style={{backgroundImage: `url(${template.url})`}}></div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Templates;","import { useState } from \"react\";\r\n\r\nconst Meme = ({meme, setMeme}) => {\r\n    const [form, setForm] = useState({\r\n        template_id: meme.id,\r\n        username: \"RadhikaSaini1\",\r\n        password: \"piplupradz\",\r\n        boxes: [],\r\n    })\r\n\r\n    const generateMeme = () => {\r\n        let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\r\n        \r\n        form.boxes.map((box, index) => {\r\n            url += `&boxes[${index}][text]=${box.text}`;\r\n        })\r\n        fetch(url).then(res => res.json())\r\n        .then(data => {\r\n            setMeme({...meme, url: data.data.url});\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"meme\">\r\n            <img src={meme.url} alt=\"\" />\r\n            <div>\r\n                {\r\n                    [...Array(meme.box_count)].map((_, index) => (\r\n                        <input \r\n                            key={index}\r\n                            type=\"text\" \r\n                            placeholder={`Meme Caption ${index}:`} \r\n                            onChange={(e) => {\r\n                                const newBoxes = form.boxes;\r\n                                newBoxes[index] = {text:e.target.value};\r\n                                setForm({...form, boxes: newBoxes});\r\n                            }}\r\n                        />\r\n                    ))\r\n                }        \r\n            </div>\r\n            <div>\r\n                <button onClick={generateMeme}>Generate Meme</button>\r\n                <button onClick={()=> setMeme(null)}>Choose Template</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Meme;","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport Templates from './Templates';\nimport Meme from './Meme';\n\n\n\nfunction App(){\n  const [templates,setTemplates]=useState([]);\n  const [meme,setMeme]=useState(null);\n\n  const fetchTemplate=async()=>{\n    const response=await fetch(\"https://api.imgflip.com/get_memes\");\n    const memes=await response.json();\n    setTemplates(memes.data.memes);\n  }\n\n  useEffect(()=>{\n    fetchTemplate();\n  },[]);\n  \n  \n  return(\n    <div className=\"App\">\n      <h1>Meme Generator</h1>\n      <h3>Choose any Template and make your meme</h3>\n      {meme===null? <Templates templates={templates} \n      setMeme={setMeme} />\n      : <Meme meme={meme} setMeme={setMeme}/>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}